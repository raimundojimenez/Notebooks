// Caesar cipher
caesar : {n} ([8], String n) -> String n
caesar (s, msg) = [ shift x | x <- msg ] 
    where   map       = ['A' .. 'Z'] <<< s 
            shift c   = map @ (c - 'A')


//Exercise 2.7 
cycle : {n, a} (fin n, n >= 1) => [n]a -> [inf]a

/*
Cycle is a function which is parametised over n and a and which takes a 
sequence of size n and of any type a and delivers a sequence of infinite
size and any type.  The constraints on n are that n is finite and
greater than or equal to 1.
*/
cycle sq = sq2 where sq2 = sq # sq2 

// Exercise 2.8
// vigenere : {n, m} (fin n, n >= 1) => (String n, String m) -> String m

/*
n is the key and m is the plaintext.  The ciphertext is same size as plaintext.
Repeated use of Caeser cipher.
*/

vignere key plaintext = join[x | x <- key]

